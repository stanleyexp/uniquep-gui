name: pyinstaller

on:
  workflow_dispatch:
    branches:
      - main
    # inputs:
    #   logLevel:
    #     description: 'Log level'     
    #     required: true
    #     default: 'warning' 
    #     type: choice
    #     options:
    #     - info
    #     - warning
    #     - debug 
    #   tags:
    #     description: 'Test scenario tags'
    #     required: false 
    #     type: boolean
    #   environment:
    #     description: 'Environment to run tests against'
    #     type: environment
    #     required: true
jobs:
  build-uniquep-gui:
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
        # os: [windows-latest, macos-latest]
        include:
          - os: windows-latest
            pyinstaller-build: pyinstaller -w --onefile --upx-exclude=python38.dll --upx-exclude=vcruntime140.dll uniquep-gui.py
            file-upx: dist\uniquep-gui.exe 
          # - os: macos-latest
          #   pyinstaller-build: pyinstaller -w --onefile uniquep-gui.py
          #   file-upx: dist/uniquep-gui
        python-version:
          - '3.8.1' # on windows, don't use 3.8.10
        poetry-version:
          - '1.1.6'

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        id: setup-python
        with:
          python-version: ${{ matrix.python-version }}
      - name: do something on Windows
        if: runner.os == 'Windows'
        run: choco install upx
      # - name: install upx on macOS
      #   if: runner.os == 'macOS'
      #   run: brew install upx
      - name: Install poetry
        uses: abatilo/actions-poetry@v2.0.0
        with:
          poetry-version: ${{ matrix.poetry-version }}
      
      - name: Add Poetry to $PATH
        run: |
          echo "$HOME/.poetry/bin" >> $GITHUB_PATH
      
      - name: Configure poetry
        run: |
          poetry config virtualenvs.in-project false
          poetry config virtualenvs.path ~/.cache/pypoetry

      - name: Cache Poetry virtualenv
        uses: actions/cache@v3
        id: cache
        with:
          path: ~/.cache/pypoetry
          key: ${{ matrix.os }}-python-${{ steps.setup-python.outputs.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ matrix.os }}-python-${{ steps.setup-python.outputs.python-version }}-poetry-
            ${{ matrix.os }}-
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: poetry install
      
      - name: build with pyinstaller
        run: |
          poetry run ${{ matrix.pyinstaller-build }}
        # poetry run pyinstaller -w --onefile uniquep-gui.py

      # - name: zip artifact
      #   run: |
      #     zip -r dist.zip dist
      # - name: compress with upx
      #   uses: svenstaro/upx-action@v2
      #   with:
      #     file: ${{ matrix.file-upx }}
      - name: upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: uniquep-gui
          path: |
            dist/uniquep-gui.exe
          # dist/uniquep-gui
          retention-days: 1

      # - name: Test
      #   run: |
      #     poetry run pytest